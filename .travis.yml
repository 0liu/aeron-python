language: cpp

env:
  global:
    - CODECOV=no

cache:
  directories:
    - ${DEPS_DIR}

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=clang-4.0 CXX_COMPILER=clang++-4.0 PYTHON_VERSION=3.6
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
            - deadsnakes
          packages:
            - clang-4.0
            - libstdc++-6-dev
            - python3.6-dev
            - ninja-build

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=clang-5.0 CXX_COMPILER=clang++-5.0 PYTHON_VERSION=3.6
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
            - deadsnakes
          packages:
            - clang-5.0
            - libstdc++-6-dev
            - python3.6-dev
            - ninja-build

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=gcc-6 CXX_COMPILER=g++-6 CODECOV=no PYTHON_VERSION=3.6
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
          packages:
            - g++-6
            - ninja-build
            - python3.6-dev
            - lcov

    - os: linux
      dist: trusty
      sudo: false
      env: CC_COMPILER=gcc-7 CXX_COMPILER=g++-7 CODECOV=yes PYTHON_VERSION=3.6
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
          packages:
            - g++-7
            - ninja-build
            - python3.6-dev
            - lcov

    - os: osx
      osx_image: xcode9.3
      env: BUILD_TYPE=Debug


before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
    fi

install:
  # Setup compilers
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ "${CC_COMPILER}" != "" ]]; then export CC=${CC_COMPILER}; fi
      ${CC} --version

      if [[ "${CXX_COMPILER}" != "" ]]; then export CXX=${CXX_COMPILER}; fi
      ${CXX} --version
    fi
  # Update references on OSX
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install ninja
      brew upgrade python
    fi
  # Install Python packages through pip
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      export PYTHON_EXECUTABLE="/usr/local/bin/python${PYTHON_VERSION}"
    else
      export PYTHON_EXECUTABLE="/usr/bin/python${PYTHON_VERSION}"
    fi

    export CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}"

    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    ${PYTHON_EXECUTABLE} get-pip.py --user
    ${PYTHON_EXECUTABLE} -m pip install Cython
    ${PYTHON_EXECUTABLE} -m pip install --user -r requirements.txt
  # Setup code coverage for GCC builds
  - |
    if [[ "${CODECOV}" == "yes" ]]; then
      export CMAKE_OPTIONS=${CMAKE_OPTIONS}" -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage"
    fi

script:
  - mkdir bin
  - cd bin
  - cmake -GNinja ${CMAKE_OPTIONS} ..
  - cmake --build . --target all
  - ctest --verbose

after_success:
  # Creating report
  - cd ${TRAVIS_BUILD_DIR}
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info #debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
